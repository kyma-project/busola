name: PR Description Check

on: 
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]

jobs:
  run-desc-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Print PR info to console
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          {
            echo 'cleaned<<EOF'
            echo "${PR_BODY}" | tr -d '\r'
            echo EOF
          } >> "$GITHUB_OUTPUT"
  check_link_requests:
    runs-on: ubuntu-latest
    name: Check linked issues
    permissions:
      issues: read
      pull-requests: write
    steps:
      - uses: nearform-actions/github-action-check-linked-issues@v1
        id: check-linked-issues
  task-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            getPendingTasks(body: string): string {
                let responseString = "";
                try {
                    const uncompletedTasks = body.match(/(- \[[ ]\].+)/g);
                    if (undefined != uncompletedTasks) {
                        responseString += 'Uncompleted Tasks\n';
                        uncompletedTasks.forEach(u => {
                            responseString += `${u}\n`;
                        });
                    }
                } catch (e) {
                    responseString = "";
                }
                return responseString;
            }
            async function run(): Promise<void> {
                try {
                    const prBody = github.context.payload.pull_request?.body;
                    if (!prBody) {
                        console.log("PR don't have tasks to check");
                        return
                    }
                    console.log('Getting a list of uncompleted tasks: ');
                    let pendingTasks = Util.getPendingTasks(prBody);
                    console.log(pendingTasks);
                    let isTaskListCompleted = false;
                    if (!pendingTasks) {
                        isTaskListCompleted = true;
                    }
                    console.log(`All tasks completed: ${isTaskListCompleted}`);
            
                    if (isTaskListCompleted) {
                        console.log(`SUCCESS: All tasks completed`);
                        return;
                    } else {
                        console.log(`FAILED: Some tasks are still pending! \n${pendingTasks}\nLength: ${pendingTasks.length}`);
                    }
                } catch (error) {
                    console.log(error.message)
                }
            }
            run();