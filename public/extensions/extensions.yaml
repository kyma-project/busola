# dataSources:
#   secret:
#     resource:
#       kind: Secret
#       version: v1
#     filter: '$item.metadata.name = $root.spec.secretName'
# details:
#   header: 
#     - source: 'status.state ? "error" : "ok"'
#       highlights:
#         positive:
#           - ok
#         negative: 
#           - error
#       name: status
#       widget: Badge
#   body: 
#     - name: configuration
#       widget: Panel
#       children:
#         - name: spec.redirectUris
#           source: spec.redirectUris
#           widget: Labels
#           visibility: $exists(spec.redirectUris)
#         - name: spec.postLogoutRedirectUris
#           source: spec.postLogoutRedirectUris
#           widget: Labels
#           visibility: $exists(spec.postLogoutRedirectUris)
#         - name: spec.clientName
#           source: spec.clientName
#           widget: Labels
#           visibility: $exists(spec.clientName)
#         - name: spec.responseTypes
#           source: spec.responseTypes
#           widget: Labels
#         - name: spec.grantTypes
#           source: spec.grantTypes
#           widget: Labels
#         - name: spec.scope
#           source: spec.scope
#           widget: Labels
#         - name: spec.audience
#           source: spec.audience
#           widget: Labels
#           visibility: $exists(spec.audience)
#         - name: spec.secretName
#           widget: ResourceLink
#           source: spec.secretName
#           resource:
#             name: spec.secretName
#             namespace: $root.metadata.namespace
#             kind: "'Secret'"
#         - name: spec.tokenEndpointAuthMethod
#           source: spec.tokenEndpointAuthMethod
#           widget: Labels
#     - name: data
#       widget: Panel
#       source: $secret().items.data
#       decodable: true
#       children:
#         - name: secret.client_id
#           source: client_id
#         - name: secret.client_secret
#           source: client_secret
# form:
#   - path: metadata.name
#     extraPaths:
#       - spec.secretName
#       - metadata.labels['app.kubernetes.io/name']
#   - path: spec.responseTypes
#     simple: true
#     required: true
#     widget: MultiCheckbox
#     name: Response Types
#     options:
#       - key: id_token
#         name: ID Token
#       - key: code
#         name: Code
#       - key: token
#         name: Token
#   - path: spec.grantTypes
#     simple: true
#     required: true
#     widget: MultiCheckbox
#     options:
#       - key: client_credentials
#         name: Client Credentials
#       - key: authorization_code
#         name: Authorization Code
#       - key: implicit
#         name: Implicit
#       - key: refresh_token
#         name: Refresh Token
#   - name: spec.clientName
#     path: spec.clientName
#     widget: Text      
#   - name: spec.secretName
#     path: spec.secretName
#     widget: Resource
#     resource:
#       kind: Secret
#       scope: namespace
#       version: v1  
#   - name: spec.tokenEndpointAuthMethod
#     path: spec.tokenEndpointAuthMethod
#     enum:
#       - none
#       - client_secret_basic
#       - client_secret_post
#       - private_key_jwt
#   - name: spec.scope
#     widget: Text
#     simple: true
#     path: spec.scope
#     inputInfo: 'You can provide more then one Scope, but they have to be separated by a Space'    
#   - widget: SimpleList
#     name: spec.redirectUris
#     defaultExpanded: true
#     path: spec.redirectUris
#     inputInfo: "Input must consist of two parts, which are separated by ':' (e.g. 'test:temp')"      
#     children:
#       - path: '[]'
#   - name: spec.postLogoutRedirectUris
#     path: spec.postLogoutRedirectUris
#     widget: SimpleList
#     defaultExpanded: true
#     inputInfo: "Input must consist of two parts, which are separated by ':' (e.g. 'test:temp')"      
#     children:
#       - path: '[]'
#   - path: spec.audience
#     name: spec.audience
#     widget: SimpleList
#     defaultExpanded: true
#     children:
#       - path: '[]'
# general:
#   resource: 
#     kind: OAuth2Client
#     group: hydra.ory.sh
#     version: v1alpha1
#   name: OAuth2 Clients
#   category: Configuration
#   urlPath: oauth2clients
#   scope: namespace
#   description: >-
#     {{[OAuth2 Clients](https://kyma-project.io/docs/kyma/latest/03-tutorials/00-api-exposure/apix-05-expose-and-secure-workload-oauth2#register-an-o-auth2-client-and-get-tokens)}}
#     allows an application to acquire an OAuth2 token to access protected resources.
# list:
#   - name: spec.secretName
#     widget: ResourceLink
#     source: spec.secretName
#     resource:
#       name: spec.secretName
#       namespace: $root.metadata.namespace
#       kind: "'secret'"
#   - source: 'status.state ? "error" : "ok"'
#     highlights:
#       positive:
#         - ok
#       negative: 
#         - error
#     name: status
#     widget: Badge
#     description: status.message
# presets:
#   - name: template
#     default: true
#     value:
#       spec:
#         grantTypes: []
#         scope: ''
#         secretName: ''
#         tokenEndpointAuthMethod: client_secret_basic  
#         responseTypes: []
#         grantTypes: []
# translations:
#   en: 
#       metadata.annotations: Annotations
#       metadata.labels: Labels
#       metadata.creationTimestamp: Created at
#       status: Status
#       spec.scope: Scope
#       spec.responseTypes: Response Types
#       spec.grantTypes: Grant Types
#       spec.tokenEndpointAuthMethod: Token Endpoint Authentication Method
#       spec.tokenEndpointAuthMethod.none: None
#       spec.tokenEndpointAuthMethod.client_secret_basic: Client Secret/ Basic
#       spec.tokenEndpointAuthMethod.client_secret_post: Client Secret/ POST
#       spec.tokenEndpointAuthMethod.private_key_jwt: Private Key/ JWT
#       spec.redirectUris: Redirect URIs
#       spec.postLogoutRedirectUris: Post-Logout Redirect URIs
#       spec.audience: Audience
#       spec.secretName: Secret Name
#       configuration: Configuration
#       data: Data
#       spec.clientName: Client Name
#       status: Status
#       secret.client_id: client_id
#       secret.client_secret: client_secret
# ---
dataSources:
  moduleTemplates:
    resource:
      kind: ModuleTemplate
      namespace: kyma-system
      group: operator.kyma-project.io
      version: v1alpha1
details:
  header: []
  body:
    - name: Summary
      widget: Panel
      children:
        - name: channel
          source: spec.channel
        - name: State
          source: status.state
        - name: Age
          source: metadata.creationTimestamp
    - widget: Alert
      severity: warning
      source: '"This module is in experimental phase and might change in future"'
      visibility: '"beta" in $item.spec.modules.channel'
    - widget: Table
      source: 'spec.modules[]'
      name: Modules
      visibility: $exists(*)
      children:
        - source: $item.name
          name: Module Name
        - source: $item.channel
          name: Channel
form:
  - simple: true
    path: spec.channel
    required: true
  - widget: GenericList
    path: spec.modules
    children:
      - path: "[].name"
        required: true
        enum: '$distinct($moduleTemplates().items.metadata.labels."operator.kyma-project.io/module-name")'
      - path: "[].channel"
        required: true
        visibility: "$boolean($item.name)"
        enum: |
          $filter($moduleTemplates().items, function($v) {
            $v.metadata.labels."operator.kyma-project.io/module-name" = $item.name
          }).spec.channel
  - widget: Alert
    severity: warning
    alert: '"This module is in experimental phase and might change in future"'
    visibility: '"beta" in $item.spec.modules.channel'
general:
  resource:
    kind: Kyma
    group: operator.kyma-project.io
    version: v1alpha1
  name: AK Kyma
  category: AK
  urlPath: ak-kymas
  scope: namespace
list:
  - name: Channel
    widget: Labels
    source: spec.channel
  - name: State
    widget: Badge
    source: status.state
    tooltip: status.state
  - name: Age
    source: metadata.creationTimestamp
translations:
  en:
    metadata.annotations: Annotations
    metadata.labels: Labels
    metadata.creationTimestamp: Created at
injections:
  - name: Kyma
    widget: Panel
    source: $
    targets:
      - slot: top
        location: ClusterOverview
    order: 1 
    children: 
      - name: Name
        source: metadata.name
        widget: ResourceLink
        resource:
          name: metadata.name
          namespace: metadata.namespace
          kind: '"Kyma"'
      - widget: Alert
        severity: warning
        source: '"This module is in experimental phase and might change in future"'
        visibility: '"beta" in $item.spec.modules.channel'
      - name: Installed Modules
        source: $item.spec.modules
        widget: Table
        disablePadding: true  
        children: 
          - name: Name
            source: name
          - name: Name
            source: $parent.metadata.name
          - name: Namespace
            source: $parent.metadata.namespace
          - name: Channel
            source: channel
            widget: Text
          - name: State
            widget: Badge
            source: '$parent.status.modules ? $filter($parent.status.modules, function($p){$p.name="cluster-ip"}).state : $parent.status.state'
            tooltip: status.state
          - name: ''
            source: '"Go to details"'
            widget: ResourceButton
            resource:
              name: $parent.metadata.name
              namespace: $parent.metadata.namespace
              kind: '"Kyma"'
        