kind: ConfigMap
apiVersion: v1
metadata:
  name: authorization-policies
  namespace: kube-public
  labels:
    app.kubernetes.io/name: authorization-policies
    busola.io/extension: resource
    busola.io/extension-version: '0.5'
data:
  dataSources: |-
    {
      "podSelector": {
        "resource": {
          "kind": "Pod",
          "version": "v1",
        },
        "filter": "$matchByLabelSelector($item, $root.spec.selector.matchLabels)"
      }
    }
  details: |-
    {
      "header": [
        {
          "source": "spec.action",
          "name": "spec.action"
        },
        {
          "source": "spec.provider",
          "widget": "Labels",
          "name": "spec.provider"
        }
      ],
      "resourceGraph": {
        "colorVariant": 3,
        "dataSources": [
          {
            "source": "podSelector"
          }
        ]
      },
      "body": [
        {
          "widget": Table,
          "name": "spec.rules",
          "source": "spec.rules",
          "disablePadding": true,
          "showHeader": false,
          "showSearchField": false,
          "visibility": "$exists(*)",
          # "collapsibleTitle": "'Rule #' & $string($index + 1) & ($exists($item.from) ? ' From' : '') & ($exists($item.to) ? ' To' : '') & ($exists($item.when) ? ' When' : '')",
          "collapsibleTitle": "'Rule #' & $string($index + 1) & (' ' & $join($keys($item), ' '))",
          "collapsible": [
            {
              "source": "$item.from",
              "widget": "Table",
              "name": "spec.rules.from",
              "disablePadding": true,
              "showHeader": false,
              "showSearchField": false,
              "visibility": "$exists(*)",
              "collapsibleTitle": "'From #' & $string($index + 1) & (' ' & $join($keys($item.source), ' '))",
              "collapsible": [
                {
                  "source": "$item.source",
                  "widget": "Panel",
                  "name": "spec.rules.from.source",
                  "children": [
                    { 
                      "source": "$item.principals", 
                      "name": "spec.rules.from.source.principals", 
                      "widget": "JoinedArray",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notPrincipals", 
                      "name": "spec.rules.from.source.notPrincipals", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.requestPrincipals", 
                      "name": "spec.rules.from.source.requestPrincipals", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notRequestPrincipals", 
                      "name": "spec.rules.from.source.notRequestPrincipals", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.namespaces", 
                      "name": "spec.rules.from.source.namespaces", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notNamespaces", 
                      "name": "spec.rules.from.source.notNamespaces", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.ipBlocks", 
                      "name": "spec.rules.from.source.ipBlocks", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notIpBlocks", 
                      "name": "spec.rules.from.source.notIpBlocks", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.remoteIpBlocks", 
                      "name": "spec.rules.from.source.remoteIpBlocks", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notRemoteIpBlocks", 
                      "name": "spec.rules.from.source.notRemoteIpBlocks", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                  ]
                }
              ]
            },
            {
              "source": "$item.to",
              "widget": "Table",
              "name": "spec.rules.to",
              "disablePadding": true,
              "showHeader": false,
              "showSearchField": false,
              "visibility": "$exists(*)",
              "collapsibleTitle": "'To #' & $string($index + 1) & (' ' & $join($keys($item.operation), ' '))",
              "collapsible": [
                {
                  "source": "$item.operation",
                  "widget": "Panel",
                  "name": "spec.rules.to.operation",
                  "children": [
                    { 
                      "source": "$item.Hosts", 
                      "name": "spec.rules.to.operation.hosts", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notHosts", 
                      "name": "spec.rules.to.operation.notHosts", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.ports", 
                      "name": "spec.rules.to.operation.ports", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notPorts", 
                      "name": "spec.rules.to.operation.notPorts", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.methods", 
                      "name": "spec.rules.to.operation.methods", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notMethods", 
                      "name": "spec.rules.to.operation.notMethods", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.paths", 
                      "name": "spec.rules.to.operation.paths", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    },
                    { 
                      "source": "$item.notPaths", 
                      "name": "spec.rules.to.operation.notPaths", 
                      "widget": "Labels",
                      "visibility": "$exists(*)"
                    }
                  ]
                }
              ]
            },
            {
              "source": "$item.when",
              "widget": "Table",
              "name": "spec.rules.when",
              "visibility": "$exists(*)",
              "children": [
                { 
                  "source": "$item.key",
                  "name": "spec.rules.when.key",
                  "visibility": "$exists(*)"
                },
                { 
                  "source": "$item.values", 
                  "name": "spec.rules.when.values", 
                  "widget": "JoinedArray",
                  "separator": "break",
                  "visibility": "$exists(*)"
                },
                { 
                  "source": "$item.notValues", 
                  "name": "spec.rules.when.notValues", 
                  "widget": "JoinedArray",
                  "separator": "break",
                  "visibility": "$exists(*)"
                }
              ]
            },
          ],
        },
        {
          "widget": "Panel",
          "name": "spec.selector.matchLabels",
          "disablePadding": true,
          "children": [
            { 
              "source": "$podSelector()",
              "widget": "ResourceList",
              "disableCreate": true,
              "visibility": "$boolean($root.spec.selector.matchLabels)"
            },
            {
              "source": "spec.selector",
              "widget": "Panel",
              "name": "selector.matchesAllPods",
              "visibility": "$not($exists(*)) or $not($boolean(*))"
            }
          ],
          "header": [
            {
              "source": "spec.selector.matchLabels",
              "widget": "Labels",
              "name": "spec.selector.matchLabels",
              "visibility": "$boolean(*)"
            }
          ],
        }
      ]
    }
  form: |-
    [
      {
        "path": "spec.selector.matchLabels", 
        "widget": "KeyValuePair"
      },
      {
        "path": "spec.action",
        "simple": true
      },
      {
        "path": "spec.provider",
        "widget": "FormGroup",
        "children":[
          { "path": "name" }
        ]
      },
      {
        "path": "spec.rules",
        "widget": "GenericList",
        "simple": true,
        "children": [
          {
            "path": "[].from",
            "widget": "GenericList",
            "children": [
              {
                "path": "[].source",
                "widget": "FormGroup",
                "children": [
                  { "path": "principals", "widget": "SimpleList" },
                  { "path": "notPrincipals", "widget": "SimpleList" },
                  { "path": "requestPrincipals", "widget": "SimpleList" },
                  { "path": "notRequestPrincipals", "widget": "SimpleList" },
                  { "path": "namespaces", "widget": "SimpleList" },
                  { "path": "notNamespaces", "widget": "SimpleList" },
                  { "path": "ipBlocks", "widget": "SimpleList" },
                  { "path": "notIpBlocks", "widget": "SimpleList" },
                  { "path": "remoteIpBlocks", "widget": "SimpleList" },
                  { "path": "notRemoteIpBlocks", "widget": "SimpleList" }
                ]
              }
            ]
          },
          {
            "path": "[].to",
            "widget": "GenericList",
            "children": [
              {
                "path": "[].operation",
                "widget": "FormGroup",
                "children": [
                  { "path": "hosts", "widget": "SimpleList" },
                  { "path": "notHosts", "widget": "SimpleList" },
                  { "path": "ports", "widget": "SimpleList" },
                  { "path": "notPorts", "widget": "SimpleList" },
                  { "path": "methods", "widget": "SimpleList" },
                  { "path": "notMethods", "widget": "SimpleList" },
                  { "path": "paths", "widget": "SimpleList" },
                  { "path": "notPaths", "widget": "SimpleList" }
                ]
              }
            ]
          },
          {
            "path": "[].when",
            "widget": "GenericList",
            "children": [
              { "path": "[].key", "widget": "Text" },
              { "path": "[].values", "widget": "SimpleList" },
              { "path": "[].notValues", "widget": "SimpleList" }
            ]
          },
        ]
      }
    ]
  general: |-
    {
      "resource": {
        "kind": "AuthorizationPolicy",
        "group": "security.istio.io",
        "version": "v1beta1"
      },
      "name": "Ext Authorization Policies",
      "category": "Istio",
      "urlPath": "ext-authorizationpolicies",
      "scope": "namespace",
      "description": "{{[Istio Authorization Policy](https://istio.io/latest/docs/reference/config/security/authorization-policy/)}} allows for workload access management in the mesh."
    }
  list: |-
    [
      {
        "name": "action",
        "source": "spec.action"
      }
    ]
  translations: |-
    en:
      spec.action: Action
      spec.provider: Provider
      spec.rules: Rules
      spec.rules.from: From
      spec.rules.from.source: Source
      spec.rules.from.source.principals: Principals
      spec.rules.from.source.notPrincipals: NotPrincipals
      spec.rules.from.source.requestPrincipals: RequestPrincipals
      spec.rules.from.source.notRequestPrincipals: NotRequestPrincipals
      spec.rules.from.source.namespaces: Namespaces
      spec.rules.from.source.notNamespaces: NotNamespaces
      spec.rules.from.source.ipBlocks: IpBlocks
      spec.rules.from.source.notIpBlocks: NotIpBlocks
      spec.rules.from.source.remoteIpBlocks: RemoteIpBlocks
      spec.rules.from.source.notRemoteIpBlocks: NotRemoteIpBlocks
      spec.rules.to: To
      spec.rules.to.operation: Operation
      spec.rules.to.operation.hosts: Hosts
      spec.rules.to.operation.notHosts: NotHosts
      spec.rules.to.operation.ports: Ports
      spec.rules.to.operation.notPorts: NotPorts
      spec.rules.to.operation.methods: Methods
      spec.rules.to.operation.notMethods: NotMethods
      spec.rules.to.operation.paths: Paths
      spec.rules.to.operation.notPaths: NotPaths
      spec.rules.when: When
      spec.rules.when.key: Key
      spec.rules.when.values: Values
      spec.rules.when.notValues: NotValues
      spec.selector.matchLabels: Selector
      selector.matchesAllPods: Matches all Pods in the Namespace
