kind: ConfigMap
apiVersion: v1
metadata:
  name: functions
  namespace: kube-public
  labels:
    app.kubernetes.io/name: functions
    busola.io/extension: resource
    busola.io/extension-version: '0.5'
data:
  details: |-
    {
      "header": [],
      "body": [
        {
          "name": "Summary",
          "widget": "Panel",
          "children": [
            {
              "name": "replicas",
              "source": "spec.replicas"
            },
            {
              "name": "runtime",
              "source": "spec.runtime"
            },
            {
              "name": "runtimeImageOverride",
              "source": "spec.runtimeImageOverride"
            },
            {
              "name": "Configured",
              "source": "status.conditions[?(@.type=='ConfigurationReady')].status"
            },
            {
              "name": "Built",
              "source": "status.conditions[?(@.type=='BuildReady')].status"
            },
            {
              "name": "Running",
              "source": "status.conditions[?(@.type=='Running')].status"
            },
            {
              "name": "Runtime",
              "source": "spec.runtime"
            },
            {
              "name": "Version",
              "source": "metadata.generation"
            },
            {
              "name": "Age",
              "source": "metadata.creationTimestamp"
            }
          ]
        },
        {
          "path": "spec",
          "widget": "CodeViewer"
        }
      ]
    }
  form: |-
    [
      {
        "var": "sourceType",
        "widget": "Text",
        "enum": ["Inline", "Git Repository"],
        "defaultValue": "$exists(spec.source.gitRepository) ? 'Git Repository' : 'Inline'"
      },
      {
        "simple": true,
        "path": "spec.runtime",
        "enum": ["nodejs12", "nodejs14", "nodejs16", "python39"]
      },
      { "path": "spec.runtimeImageOverride" },
      {
        "path": "spec.source.gitRepository",
        "widget": "FormGroup",
        "visibility": "$sourceType = 'Git Repository'",
        "children": [
          { "path": "url" },
          { "path": "baseDir", "required": true },
          { "path": "reference", "required": true },
          {
            "var": "useAuthorization",
            "type": "boolean",
            "defaultValue": "$exists($.spec.source.gitRepository.auth)"
          },
          {
            "widget": "FormGroup",
            "path": "auth",
            "visibility": "$useAuthorization",
            "children": [
              { "path": "secretName" },
              { "path": "type" }
            ]
          },
        ]
      },
      {
        "path": "spec.scaleConfig",
        "widget": "FormGroup",
        "columns": "2",
        "children": [
          {
            "advanced": true,
            "path": "minReplicas",
            "required": false,
            "min": "1"
          },
          {
            "advanced": true,
            "path": "maxReplicas",
            "required": false,
            "min": "1"
          },
        ]
      },
      {
        "path": "spec.resourceConfiguration.function",
        "widget": "FormGroup",
        "children": [
          {
            "path": "resources.limits",
            "widget": "KeyValuePair"
          },
          {
            "path": "resources.requests",
            "widget": "KeyValuePair"
          },
        ]
      },
      {
        "path": "spec.resourceConfiguration.build",
        "widget": "FormGroup",
        "children": [
          {
            "path": "resources.limits",
            "widget": "KeyValuePair"
          },
          {
            "path": "resources.requests",
            "widget": "KeyValuePair"
          },
        ]
      },
      {
        "path": "spec.source.inline",
        "visibility": "$sourceType = 'Inline'",
        "children": [
          {
            "path": "source",
            "widget": "CodeEditor",
            "language": "$contains($root.spec.runtime, 'node') ? 'javascript' : 'python'",
          },
          {
            "path": "dependencies",
            "widget": "CodeEditor",
            "language": "$contains($root.spec.runtime, 'node') ? 'javascript' : 'plaintext'",
          }
        ]
      },
    ]
  general: |-
    {
      "resource": {
        "kind": "Function",
        "group": "serverless.kyma-project.io",
        "version": "v1alpha2"
      },
      "name": "Ext Functions",
      "category": "Workloads",
      "urlPath": "ext-functions",
      "scope": "namespace"
    }
  list: |-
    [
      {
        "name": "Runtime",
        "source": "spec.runtime = 'nodejs16' ? 'Node.js 16' : (spec.runtime = 'nodejs14' ? 'Node.js 14' : (spec.runtime = 'nodejs12' ? 'Node.js 12 - Deprecated' : (spec.runtime = 'python39' ? 'Python 3.9' : spec.runtime)))"
      },
      {
        "name": "Source Type",
        "source": "spec.source.gitRepository ? 'Git Repository' : 'Inline Editor'"
      },
      {
        "name": "Status",
        "widget": "Badge",
        "highlights": {
          "positive": ["RUNNING"],
          "negative": ["FAILED", "ERROR"],
          "informative": ["INITIALIZING"],
          "critical": ["DEPLOYING", "BUILDING", "PENDING"]
        },
        "source": "($.status = undefined or $.status.conditions = undefined or $count($.status.conditions) = 0) 
          ? 'INITIALIZING' 
          : $count($filter($.status.conditions, function($v) { $v.status = 'False' })) != 0
            ? $count($filter($.status.conditions, function($v) { $v.type = 'Running' and $v.status = 'True' })) != 0 
              ? 'ERROR'
              : 'FAILED'
            : $count($filter($.status.conditions, function($v) { $v.type = 'ConfigurationReady' and $v.status = 'True' })) != 0 
              ? $count($filter($.status.conditions, function($v) { $v.type = 'BuildReady' and $v.status = 'True' })) != 0 
                ? $count($filter($.status.conditions, function($v) { $v.type = 'Running' and $v.status = 'True' })) != 0 
                  ? 'RUNNING'
                  : $count($filter($.status.conditions, function($v) { $v.type = 'Running' and $v.status = 'Unknown' and $v.reason = 'MinReplicasNotAvailable' })) != 0 
                    ? 'PENDING'
                    : 'DEPLOYING'
                : 'BUILDING'
              : 'INITIALIZING'
        ",
        "tooltip": "($.status = undefined or $.status.conditions = undefined or $count($.status.conditions) = 0) 
          ? null 
          : $count($filter($.status.conditions, function($v) { $v.status = 'False' })) != 0
            ? $count($filter($.status.conditions, function($v) { $v.type = 'Running' and $v.status = 'True' })) != 0 
              ? 'New revision error: ' & $filter($.status.conditions, function($v) { $v.status = 'False' })[0].message
              : 'Error: ' & $filter($.status.conditions, function($v) { $v.status = 'False' })[0].message
            : null
        "
      }
    ]
