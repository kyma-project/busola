kind: ConfigMap
apiVersion: v1
metadata:
  name: authorization-policies
  namespace: kube-public
  labels:
    app.kubernetes.io/name: authorization-policies
    busola.io/extension: resource
    busola.io/extension-version: '0.5'
data:
  dataSources: |-
    {
      "podSelector": {
        "resource": {
          "kind": "Pod",
          "version": "v1",
        },
        "filter": "$matchByLabelSelector($item, $root.spec.selector.matchLabels)"
      }
    }
  details: |-
    {
      "header": [
        {
          "source": "spec.action",
          "name": "spec.action"
        },
        {
          "source": "spec.provider",
          "widget": "Labels",
          "name": "spec.provider"
        }
      ],
      "body": [
        {
          "widget": Table,
          "name": "spec.rules",
          "source": "spec.rules",
          "collapsible": [
            {
              "source": "$item.from",
              "widget": "CodeViewer"
            },
            {
              "source": "$item.to",
              "widget": "CodeViewer"
            },
            {
              "source": "$item.when",
              "widget": "CodeViewer"
            },
          ],
        },
        {
          "widget": "Panel",
          "name": "spec.selector.matchLabels",
          "disablePadding": true,
          "children": [
            { 
              "source": "$podSelector()",
              "widget": "ResourceList",
              "disableCreate": true,
              "isCompact": true,
              "visibility": "$boolean($root.spec.selector.matchLabels)"
            },
            {
              "source": "spec.selector",
              "widget": "Panel",
              "name": "selector.matchesAllPods",
              "visibility": "$not($exists(*)) or $not($boolean(*))"
            }
          ],
          "header": [
            {
              "source": "spec.selector.matchLabels",
              "widget": "Labels",
              "name": "spec.selector.matchLabels",
              "visibility": "$boolean(*)"
            }
          ],
        }
      ]
    }
  form: |-
    [
      {
        "path": "spec.selector.matchLabels", 
        "widget": "KeyValuePair"
      },
      {
        "path": "spec.action",
        "required": false
      },
      {
        "path": "spec.provider",
        "widget": "Text"
      },
      {
        "path": "spec.rules",
        "widget": "GenericList",
        "children": [
          {
            "path": "[].from",
            "widget": "GenericList",
            "children": [
              {
                "path": "[].source",
                "widget": "FormGroup",
                "children": [
                  { "path": "principals", "widget": "SimpleList" },
                  { "path": "notPrincipals", "widget": "SimpleList" },
                  { "path": "requestPrincipals", "widget": "SimpleList" },
                  { "path": "notRequestPrincipals", "widget": "SimpleList" },
                  { "path": "namespaces", "widget": "SimpleList" },
                  { "path": "notNamespaces", "widget": "SimpleList" },
                  { "path": "ipBlocks", "widget": "SimpleList" },
                  { "path": "notIpBlocks", "widget": "SimpleList" },
                  { "path": "remoteIpBlocks", "widget": "SimpleList" },
                  { "path": "notRemoteIpBlocks", "widget": "SimpleList" }
                ]
              }
            ]
          },
          {
            "path": "[].to",
            "widget": "GenericList",
            "children": [
              {
                "path": "[].operation",
                "widget": "FormGroup",
                "children": [
                  { "path": "hosts", "widget": "SimpleList" },
                  { "path": "notHosts", "widget": "SimpleList" },
                  { "path": "ports", "widget": "SimpleList" },
                  { "path": "notPorts", "widget": "SimpleList" },
                  { "path": "methods", "widget": "SimpleList" },
                  { "path": "notMethods", "widget": "SimpleList" },
                  { "path": "paths", "widget": "SimpleList" },
                  { "path": "notPaths", "widget": "SimpleList" }
                ]
              }
            ]
          },
          {
            "path": "[].when",
            "widget": "GenericList",
            "children": [
              { "path": "[].key", "widget": "Text" },
              { "path": "[].values", "widget": "SimpleList" },
              { "path": "[].notValues", "widget": "SimpleList" }
            ]
          },
        ]
      }
    ]
  general: |-
    {
      "resource": {
        "kind": "AuthorizationPolicy",
        "group": "security.istio.io",
        "version": "v1beta1"
      },
      "name": "Ext Authorization Policies",
      "category": "Istio",
      "urlPath": "ext-authorizationpolicies",
      "scope": "namespace",
      "description": "{{[Istio Authorization Policy](https://istio.io/latest/docs/reference/config/security/authorization-policy/)}} allows for workload access management in the mesh."
    }
  list: |-
    [
      {
        "name": "action",
        "source": "spec.action"
      }
    ]
  translations: |-
    en:
      spec.action: Action
      spec.provider: Provider
      spec.rules: Rules
      spec.rules.from: From
      spec.selector.matchLabels: Selector
      selector.matchesAllPods: Matches all Pods in the Namespace
