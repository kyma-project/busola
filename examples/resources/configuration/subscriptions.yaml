kind: ConfigMap
apiVersion: v1
metadata:
  name: subscriptions
  namespace: kube-public
  labels:
    app.kubernetes.io/name: subscriptions
    busola.io/extension: resource
    busola.io/extension-version: '0.5'
data:
  general: |-
    resource:
      kind: Subscription
      group: eventing.kyma-project.io
      version: v1alpha1
    name: Subscriptions
    category: Configuration
    scope: namespace
    description: '{{[Subscription](https://kyma-project.io/docs/kyma/latest/05-technical-reference/00-custom-resources/evnt-01-subscription#documentation-content)}} is used to subscribe to events.'
    urlPath: subscriptions
  details: |-
    header: 
      - name: status.conditions.status
        source: 'status.ready = false ? "error" : "ready"'
        widget: Badge
        description: status.conditions.message
      - name: spec.sink
        source: spec.sink
      - source: spec.sink
        widget: ResourceLink
        name: spec.sink.controlledBy
        resource:
          name: '$substringBefore($substringAfter(spec.sink, "http://"), ".")'
          namespace: $root.metadata.namespace
          kind: "'Service'"
    body: 
      - source: status.conditions
        widget: Table
        name: status.conditions
        children:
          - source: 'status.ready = false ? "error" : "ready"'
            name: status.type
            widget: Badge
            description: status.conditions.message
          - source: '$item.status'
            name: status.conditions.status
          - source: '$item.reason'
            name: status.conditions.reason
          - source: '$readableTimestamp($item.lastTransitionTime)'
            name: status.conditions.lastTransitionTime
      - source: spec.filter.filters
        widget: Table
        name: spec.filters
        disablePadding: true
        showHeader: false
        collapsibleTitle: '"Filter #" & $string($index + 1) & " " & ($item.eventType.value)'
        collapsible:
          - widget: Columns
            children:
              - source: '$item.eventType'
                widget: Panel
                name: spec.filter.eventType
                children:
                  - source: '$parent.property'
                    name: spec.filter.event.property
                  - source: '$parent.type'
                    name: spec.filter.event.type
                  - source: '$parent.value'
                    name: spec.filter.event.value
              - source: '$item.eventSource'
                widget: Panel
                name: spec.filter.eventSource
                children:
                  - source: '$parent.property'
                    name: spec.filter.event.property
                  - source: '$parent.type'
                    name: spec.filter.event.type
                  - source: '$parent.value = "" ? "Handled by the NATS backend" : $parent.value'
                    name: spec.filter.event.value
      - widget: EventList
        filter: "$matchEvents($$, $root.kind, $root.metadata.name)"
        name: events
        defaultType: NORMAL
        hideInvolvedObjects: true
  form: |-
    - path: spec.sink
      name: spec.sink
      simple: true
      inputInfo: inputInfo.sink
      placeholder: placeholder.sink
    - widget: GenericList
      path: spec.filter.filters
      simple: true
      children:
        - path: '[].eventType.value'
          name: spec.filter.eventType
          placeholder: placeholder.eventType
          inputInfo: inputInfo.eventType
        - path: '[].eventSource.value'
          name: spec.filter.eventSource
          required: false
      template:
        eventSource:
          property: source
          type: exact
          value: ''
        eventType:
          property: type
          type: exact
          value: ''
  list: |-
    - name: status.conditions.status
      source: 'status.ready = false ? "error" : "ready"'
      widget: Badge
      description: status.conditions.message
    - name: status.cleanEventTypes
      source: status.cleanEventTypes
      widget: Labels
  translations: |-
    en:
      inputInfo.sink: Sink structure, 'http://{SERVICE}.{NAMESPACE}.svc.cluster.local'
      inputInfo.eventType: Event Type structure, 'sap.kyma.custom.{APP}.{EVENT.NAME}.{VERSION}'
      events: Events
      placeholder.eventType: Enter the event type, for example, sap.kyma.custom.test-app.order.cancelled.v1
      placeholder.sink: Enter the sink, for example, http://service.default.svc.cluster.local
      spec.filters: Filters
      spec.filter.eventType: Event Type
      spec.filter.eventSource: Event Source
      spec.filter.event.property: Property
      spec.filter.event.type: Type
      spec.filter.event.value: Value
      spec.sink: Sink
      spec.sink.controlledBy: Controlled By
      status.cleanEventTypes: Event Types
      status.conditions: Condidtions
      status.conditions.lastTransitionTime: Last Transition
      status.conditions.reason: Reason
      status.conditions.status: Status
      status.type: Type
